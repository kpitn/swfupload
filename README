Swfupload
=========

Send File with SwfUpload and Paperclip

SwfUpload Website : http://code.google.com/p/swfupload/
SwfUpload documentation :  http://demo.swfupload.org/Documentation/

Paperclip Website : http://www.thoughtbot.com/projects/paperclip
Paperclip Documentation : http://dev.thoughtbot.com/paperclip/


What's in ?
========
Cookie fix integrate : http://blog.airbladesoftware.com/2007/8/8/uploading-files-with-swfupload
Authenticity token is send
Form data are send (Jquery)
Swfupload V 2.0.2
Test with Rails 2.2.2 and Flash 10 on Linux




Installation
========

== Paperclip Installattion
script/install plugin git://github.com/thoughtbot/paperclip.git

== SwfUpload Installattion
script/install plugin git://github.com/kpitn/swfupload.git


Example
=======

== View (create.html.erb or form.html.erb)
<%= swfupload_load({:upload_url=>"/admin/photos/create",:file_post_name=>"photo[photo]"}) %>

<% form_for  @photo, :html => { :multipart => true } do |f| %>

    <span id="spanButtonPlaceHolder"></span>
        <div class="fieldset flash" id="fsUploadProgress">
    <span>Upload Queue</span>
    <div id="divStatus">0 Files Uploaded</div>
    <input id="btnCancel" type="button" value="Cancel All Uploads" onclick="swfu.cancelQueue();" disabled="disabled" style="margin-left: 2px; font-size: 8pt; height: 29px;" />

<% end %>

== Model (photo.rb)
has_attached_file :photo,
                :styles => { :original=>"700x525>",:small => "120x90>" },
                :default_style => :small,
                :path => ":rails_root/public/gallery/:id_:style_:basename.:extension",
                :url  => "/gallery/:id_:style_:basename.:extension"

== Controller (photos_controller.rb)
def create
    @photo = Photo.new(params[:photo])
    respond_to do |format|
        if @photo.save
            format.js{
            render :update do |page|
                page.insert_html :bottom,"photo_uploaded","<div class=\"photo_preview\"><img src=\"#{@photo.photo.url}\" alt=\"\"/></div>"
             end
            }
        else
            format.js{
            render :update do |page|
                page << "alert('#{@photo.errors.full_messages}');"
             end
             }
        end
    end
end



Copyright (c) 2009 Pierre BASILE, released under the MIT license
